@using Era_sphere.Areas.AreaConfiguracion.Models.Servicios
@using Era_sphere.Areas.AreaReservas.Models
@using Era_sphere.Areas.AreaHoteles.Models
@using Era_sphere.Generics
@using Telerik.Web.Mvc.UI
@model ServicioView
@{
    EraSphereContext context = new EraSphereContext();
    var tipos = context.tipo_servicios.Where(x => x.eliminado == false).ToList();
    bool edit = (bool)(ViewData["edit"]);
    LogicaReserva l = new LogicaReserva();
    int reservaID = (int)(ViewData["reservaID"]);
    List<Habitacion> habs = l.habitacionesDeReserva(reservaID);
    habs.Add(new Habitacion { detalle = "Ninguno" });
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

<script type="text/javascript">
    
    function nuevoServicio() {
        servicio = {
            detalle : $("#detalle").val(),
            tipo_servicioID : parseInt($("#tipo_servicioID").data("tComboBox").value()),
            fecha_y_hora : $("#fecha_y_hora").data("tDateTimePicker").value(),
            repeticiones : parseInt($("#repeticiones").data("tTextBox").value()),
            campo1 : $("#campo1").val(),
            campo2 : $("#campo2").val(),
            campo3 : $("#campo3").val(),
            es_precio_fijado: $("#es_precio_fijado").is(":checked") ? true : false, 
            precio_fijado: parseFloat($("#precio_fijado").val()),
            precio_normal: parseFloat($("#precio_normal").val()),
            lugar: $("#lugar").val()
        };
        if(servicio.tipo_servicioID == ""){
         servicio = null;
         alert("Debe especificar un tipo de servicio");
        }else $("#ServicioForm").data("tWindow").close();
    }
    var productos = [];
    function resetForm() {
        $("#repeticion").hide();
        $("#campo_1").hide();
        $("#campo_2").hide();
        $("#campo_3").hide();
        $("#productos_table").hide();
        productos = [];
        servicio = null;
    }
    function cambioTipo(e) {

        if (e.type == "edita") {
            e.value = $("#tipo_servicioID").data("tComboBox").value();
         } else {
            $("#campo1").removeAttr("readonly");
            $("#campo2").removeAttr("readonly");
            $("#campo3").removeAttr("readonly");
            $("#detalle").removeAttr("readonly");
            $("#repeticiones").data("tTextBox").enable();
            $("#tipo_servicioID").data("tComboBox").enable();
            $("#fecha_y_hora").data("tDateTimePicker").enable();
        }
        if (e.value.length == 0) return;
        $.ajax({
            url: '@Url.Action("ObtieneTipo", "TipoServicio")',
            traditional: true,
            data: { tipo_id: e.value, hotel_id: hotel_id },
            success: function (data) {
                resetForm();
                precio_normal = data.precio_normal;
                data = data.tipo;
                if (data.tiene_repeticiones) $("#repeticion").show();
                if (data.tiene_productos_asociados) $("#productos_table").show();
                if (data.campo1.length > 0) {
                    $("#campo_1").show();
                    document.getElementById("label_campo1").innerHTML = (data.campo1);
                }
                if (data.campo2.length > 0) {
                    $("#campo_2").show();
                    document.getElementById("label_campo2").innerHTML = (data.campo2);
                }
                if (data.campo3.length > 0) {
                    $("#campo_3").show();
                    document.getElementById("label_campo3").innerHTML = (data.campo3);
                }
                $("#precio_normal").val(precio_normal);
            },
            type: "POST",
            async: true
        });
    }
    function desabilita(e){
        $("#tipo_servicioID").data("tComboBox").disable();
        cambioTipo({ type: "edita" });
    }
</script>

<div class="block big" style="position: relative">
    <label>Servicio:</label>

    <div class="editor-label"> @Html.LabelFor(model => model.lugar) </div>
    <div class="editor-field"> @Html.DropDownListFor(model => model.lugar, new SelectList(habs, "detalle", "detalle"))</div>

    <div class="editor-label"> @Html.LabelFor(model => model.tipo_servicioID) </div>
    <div class="editor-field">
        @{Html.Telerik().ComboBoxFor(model => model.tipo_servicioID).BindTo(new SelectList(tipos, "ID", "nombre")).Placeholder("Seleccione...").SelectedIndex(0).ClientEvents(events =>
        {
            events.OnChange("cambioTipo");
            if(edit){
                events.OnLoad("desabilita");
            }
        }).Render();}
        @Html.ValidationMessageFor(model => model.tipo_servicioID)
    </div>

    <div class="editor-label"> @Html.LabelFor(model => model.detalle)</div>
    <div class="editor-field">
        @Html.TextBoxFor(model => model.detalle, new { @readonly = "readonly" })
        @Html.ValidationMessageFor(model => model.detalle)
    </div>
    <div id="fecha-y-hora">
        <div class="editor-label">@Html.Label("Fecha y Hora")</div>
        @{Html.Telerik().DateTimePickerFor(model => model.fecha_y_hora).Min(DateTime.Now).Value(DateTime.Now).Enable(false).Render();}
    </div>
    
    
    <div id="repeticion" style="display:none">
        <div class="editor-label">@Html.LabelFor(model => model.repeticiones)</div>
        @{
            if (Model == null){
                (Html.Telerik().IntegerTextBoxFor(model => model.repeticiones).MinValue(1).MaxValue(100).Value(1)).Enable(false).Render();
            }else{
                (Html.Telerik().IntegerTextBoxFor(model => model.repeticiones).MinValue(1).MaxValue(100)).Enable(false).Render();
                
            }
         }
    </div>
    
    <div id="campo_1" style="display:none">
        <div class="editor-label"> <label id="label_campo1"></label>  </div>
        <div class="editor-field"> @Html.TextBoxFor(model => model.campo1, new {@readonly = "readonly"}) </div>
    </div>
    <div id="campo_2" style="display:none">
        <div class="editor-label"> <label id="label_campo2"></label> </div>
        <div class="editor-field"> @Html.TextBoxFor(model => model.campo2, new {@readonly = "readonly"}) </div>
    </div>
    <div id="campo_3" style="display:none">
        <div class="editor-label"> <label id="label_campo3"></label> </div>
        <div class="editor-field"> @Html.TextBoxFor(model => model.campo3, new {@readonly = "readonly"}) </div>
    </div>

    <div id="productos_table" style="display:none">
    </div>

    <div id="precio_normal_div">
        <label> Este es el precio base por unidad especificado por temporada </label>
        <div class="editor-label"> @Html.LabelFor(model => model.precio_normal)</div>
        <div class="editor-field"> @Html.TextBoxFor(model => model.precio_normal, new { @readonly = "readonly" }) </div>
    </div>
    <div id="precio_fijado_div">
        <label> Marque el checkbox si desea un costo fijo por todo el servicio</label>
        <div class="editor-label"> @Html.LabelFor(model => model.es_precio_fijado)</div>
        <div class="editor-field"> @Html.CheckBoxFor(model => model.es_precio_fijado) </div>
        <div class="editor-label"> @Html.LabelFor(model => model.precio_fijado)</div>
        <div class="editor-field"> @Html.EditorFor(model => model.precio_fijado) </div>
    </div>
    @if(!edit){
        <button onclick="nuevoServicio();">Registrar</button>
    }
</div>

