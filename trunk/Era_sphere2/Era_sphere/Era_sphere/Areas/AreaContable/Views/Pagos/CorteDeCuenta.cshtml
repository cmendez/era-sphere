@using Era_sphere.Generics
@using Telerik.Web.Mvc.UI
@using Era_sphere.Areas.AreaContable.Models.Recibo
@using Era_sphere.Areas.AreaClientes.Models;
@using Era_sphere.Areas.AreaHoteles.Models;
@using Era_sphere.Areas.AreaConfiguracion.Models.Fiscal;
@using Era_sphere.Areas.AreaPromociones.Models;
@model IEnumerable<ReciboLinea>
@{
    int idHotel = (int)(ViewData["hotelID"]);
    int idCosteable = (int)(ViewData["idCosteable"]);
    int idCliente = (int)(ViewData["clienteID"]);
    decimal costo_total = (decimal)(ViewData["costo_total"]);
    EraSphereContext context = new EraSphereContext();
    Cliente c = context.clientes.Find(idCliente);
    int puntos = c.puntos_cliente;
    Hotel h = context.hoteles.Find(idHotel);
    List<MonedaView> monedas = (List<MonedaView>)((ViewData["Monedas"]));
    double impuesto = h.pais.IGV == null ? 0.0 : h.pais.IGV.Value / 100.0;
    DateTime hoy = DateTime.Now.Date;
    List<Promocion> aux = context.promociones.ToList();
    List<PromocionView> promociones = context.promociones.Where(x => x.hotelID == idHotel).ToList().Where(z => z.fecha_inicio <= hoy && z.fecha_fin >= hoy).ToList().Select(q => new PromocionView(q)).ToList();
    string nombre = LogicaCliente.toString(c);
    List<string> tipos = new List<string>();
    tipos.Add("Boleta");
    tipos.Add("Factura");
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

<script type="text/javascript">
    var dentro = [];
    var monto = 0;
    var parcial = 0;
    var puntos_van = @puntos;
    console.log(puntos_van);
    var igv = @impuesto;
    var mini = @Model.Where(x => x.pagado == false).ToList().Count() > 0 ? 1 : 0;
    var tipo_cambios = @Html.Raw(Json.Encode(monedas));
    var promociones = @Html.Raw(Json.Encode(promociones));
    function Pagar() {
        console.log(puntos_van);
        if(puntos_van < 0) alert("Se necesita de mas puntos para poder aplicar dichas promociones");
        else if (dentro.length < mini) alert("Seleccione por lo menos un detalle a pagar");
        else {
            if(mini == 0){
                se_pago = true;
                $("#Cortecuenta").data("tWindow").close();
                return;
            }
            var res = confirm("Esta seguro del pago?");
            if (!res) return;
            $('.check').attr("disabled", true);
            $("#division_div").show();
            $("#contado_text").val(monto);
            $("#tarjeta_text").val(0);
            
        }
    }
    function actualizaValor(){
            $("#impuesto").val(parcial * igv);
            monto = parcial * (1 + igv);
            $("#subtotal").val(parcial);
            $("#pagar_box").val(monto);
            var nuevo = 1;
            if(tipo_cambios.length > 0) nuevo = tipo_cambios[monedaid -1].tc;
            $("#cambio_box").val(monto * nuevo);
    }
    function Modifica(id, precio, puntaje) {
        var esta = false;
        var dentro2 = [];
        for (i in dentro)
            if (dentro[i] == id) esta = true;
            else dentro2.push(dentro[i]);

            if (!esta) {
                dentro.push(id);
                parcial += precio;
                puntos_van += puntaje;
            } else {
                dentro = dentro2;
                parcial -= precio;
                puntos_van -= puntaje;
            }
            actualizaValor();
        }
   function cambioContado() {
        var contado_str = $("#contado_text").val();

        var contado_val = parseFloat(contado_str);
        if (!(contado_val < 0) && !(contado_val > 0) || contado_val < 0) contado_val = 0;
        if (contado_val > monto) contado_val = monto;
        $("#contado_text").val(contado_val);
        $("#tarjeta_text").val(monto - contado_val);
    }
    function cambioTarjeta() {
        var tarjeta_str = $("#tarjeta_text").val();
        var tarjeta_val = parseFloat(tarjeta_str);
        if (!(tarjeta_val < 0) && !(tarjeta_val > 0) || tarjeta_val < 0) tarjeta_val = 0;
        if (tarjeta_val > monto) tarjeta_val = monto;
        $("#contado_text").val(monto - tarjeta_val);
        $("#tarjeta_text").val(tarjeta_val);
    }

    var pudo_tarjeta = false;
    function ConfirmarPago() {
        var monto_tarjeta = parseFloat($("#tarjeta_text").val());
        if (monto_tarjeta > 0) {
            pudo_tarjeta = false;
            $("#tarjeta_div").load('@Url.Action("PagoTarjetaDeCredito", "Pagos")', { monto: monto_tarjeta });
            $("#TarjetaWindow").data("tWindow").center().open();
        } else pudo_tarjeta = true;

        ConfirmarPago2();
    }
    var se_pago = false;
    function ConfirmarPago2() {
        se_pago = false;
        if (pudo_tarjeta){
         $.ajax(
                {
                    url: '@Url.Action("PagarLineas", "Pagos")',
                    traditional: true,
                    data: { lineas_ids: dentro, clienteID : @idCliente, tipo: $("#TipoPago").val(),
                            monto_tarjeta: parseFloat($("#tarjeta_text").val()),
                            monto_contado: parseFloat($("#contado_text").val()),
                            monto_total: monto,
                            reservaID: @idCosteable},
                    type: "POST",
                    success: function (data) {
                        se_pago = true;
                        $("#Cortecuenta").data("tWindow").close();
                        $("#recibo_div").load('@Url.Action("ReciboIndex", "../AreaContable/Recibo")', {reciboId: data.recibo_id, hotelID: @idHotel});
                        $("#ReciboWindow").data("tWindow").center().open();
                    },
                    async: false
                }
            );
         }
    }
    function sirveInt(x, tam) {
        if (x.length != tam) return false;
        for(i = 0; i < tam; i++)
         if (x.charAt(i) < '0' || x.charAt(i) > '9') {return false;}
        return true;
    }
    function Validar() {
        var num_tarjeta = $("#num_tarjeta").val().toString();
        var pin = $("#pin").val().toString();
      
        if (!sirveInt(num_tarjeta, 16)) {
            alert("El numero de tarjeta debe ser un numero de 16 digitos sin espacios");
            return;
        }
        if (!sirveInt(pin, 3) && !sirveInt(pin, 4)) {
            alert("El numero del pin debe ser un numero de 3 o 4 digitos sin espacios");
            return;
        }
        if (!tarjeta_de_credito_valida()){
            alert("El numero de la tarjeta ingresada no es valido");
            return;
        }
        pudo_tarjeta = true;
        $("#TarjetaWindow").data("tWindow").close();
        ConfirmarPago2();
    }
    var monedaid = 1;

    var temp = parseFloat($("#pagar_box").val());

    function ModificarCambioFacturado()
    { 
        $("#pagar_box")=temp/parseFloat($("#pagar_box").val());
    }

    function ModificarCambioPagoContado()
    {
        $("#contado_text")=temp/parseFloat($("#Selectfacturadocontado").val());
    }

    function ModificarCambioPagoTarjeta()
    {
        $("#tarjeta_text")=temp/parseFloat($("#Selectfacturadotarejeta").val());
    }

    function CambioTipoMoneda(e){
        monedaid = parseInt(e.value);
        actualizaValor();
    }
    var promocionid = 0;
    function CambioPromocion(e){
        promocionid = parseInt(e.value);
        for(i in promociones) if(promociones[i].ID == promocionid){
            $("#puntos_prom").val(promociones[i].puntos_requeridos);
            $("#descuento_prom").val(promociones[i].descuento);
        }
    }

    function AgregarPromocion(e){
        if(promocionid == 0) alert("Seleccione una promocion");
        else{
            $.ajax({
                    url: '@Url.Action("AgregarPromocion", "../AreaReservas/Reserva")',
                    data: { promocionID : promocionid, reservaID : @idCosteable},
                    type: "POST",
                    success: function (data) {
                         $("#cortecuentadiv").load('@Url.Action("CorteDeCuenta", "../AreaContable/Pagos")', { reservaID: @idCosteable, cancelable: false });
                    },
                    async: true
            });
        }
    }
   
</script>

<label>Pago a nombre de: </label>
<input type="text" readonly="readonly" value=@nombre />
<br />
<label> con @puntos puntos.</label>
<br />
@(Html.Telerik().Window()
    .Name("ReciboWindow").Title("Recibo")
    .Content(@<text><div id="recibo_div">
    </div></text>).Visible(false).Width(600).Height(400).Scrollable(true).Modal(true)
    )

@(Html.Telerik().Window()
    .Name("TarjetaWindow").Title("Pago con tarjeta")
    .Content(@<text><div id="tarjeta_div">
    </div></text>).Visible(false).Width(600).Height(400).Scrollable(true).Modal(true)
    )
    </br>
<label> Pagados </label>
<br />
@(Html.Telerik().Grid(Model.Where(p => p.pagado == true).ToList())
    .Name("GridPagados")
    .Localizable("es-ES")
    .Filterable()
    .DataKeys(keys => keys.Add(cc => cc.ID))
    .Columns(columns =>
        {
            columns.Bound(x => x.lugar);
            columns.Bound(x => x.detalle);
            columns.Bound(x => x.unidades);
            columns.Bound(x => x.precio_final);
        }
        ).Footer(false)

)
<div style="height:10px"></div>
<label>Costo total hasta la fecha: </label>
<input type="text" value="@costo_total" />
<div style="height:10px"></div>

<label>Promociones</label>
@Html.Telerik().DropDownList().BindTo(new SelectList(promociones, "ID", "nombre")).Name("PromocionesCombo").Placeholder("Seleccione").ClientEvents(e => e.OnChange("CambioPromocion"))  
<br />
<label> Puntos: </label>
<input type="text" readonly="readonly" id="puntos_prom" value="0"/>
<label> Descuento: </label> 
<input type="text" readonly="readonly" id="descuento_prom" value="0"/>
<br />
<button onclick="AgregarPromocion();">AgregarPromocion</button>
<br />

<label> Sin pagar </label>
<br />
@(Html.Telerik().Grid(Model.Where(p => p.pagado == false).ToList())
    .Name("GridPorPagar")
    .Localizable("es-ES")
    .Columns(columns =>
    {
        columns.Template(
                @<text>
                    <input class="check" type="checkbox" value="@item.ID " title="checkedLineas" onclick="Modifica(@item.ID, @item.precio_final, @item.puntos);"/>
                </text>)
                .Title("").Width(36).HtmlAttributes(new { style = "text-align:center" });
        columns.Bound(x => x.lugar);
        columns.Bound(x => x.detalle);
        columns.Bound(x => x.unidades).Title("Unidades/Dias");
        columns.Bound(x => x.precio_final);
        columns.Bound(x => x.puntos).Title("Puntos necesarios");
    }
    ).Footer(false))
<label>Todo en dolares</label>
<br />
<label>Subtotal: </label>
<input type="text" readonly="readonly" id="subtotal" value="0" />
<p />
<label>IGV: </label>
<input type="text" readonly="readonly" id="impuesto" value="0" />
<p />

<label>Monto a pagar:</label>
<input type="text" readonly="readonly" id="pagar_box" value="0"  /> 

<button onclick="Pagar();">Realizar pago</button>

<p />
<input type="text" readonly="readonly" id="cambio_box" value="0" />
@Html.Telerik().DropDownList().BindTo(new SelectList(monedas, "ID", "descripcion")).ClientEvents(e => e.OnChange("CambioTipoMoneda")).Name("CambioMonedaCombo")

<div id="division_div" style="display:none">
    <div class="editor-label"> 
        <label>Al contado: </label> 
        <input type="text" id="contado_text" onchange="cambioContado();" />
    </div>
    <div class="editor-label"> 
        <label>Con tarjeta: </label> 
        <input type="text" id="tarjeta_text" onchange="cambioTarjeta();" />
    </div>
    
        @Html.DropDownList("TipoPago", new SelectList(tipos))
    <button onclick="ConfirmarPago();">Confirmar pago</button>

</div>